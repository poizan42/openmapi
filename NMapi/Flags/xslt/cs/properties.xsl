<?xml version="1.0"?>
<!--
//
// openmapi.org - NMapi C# Mapi API - properties.xsl
//
// Copyright 2009 Topalis AG
//
// Author: Johannes Roith <johannes@jroith.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
//-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" omit-xml-declaration="yes" />

<xsl:template name="map-type">
	<xsl:param name="type" />
	<xsl:choose>
		<xsl:when test="$type = 'Unspecified'">LongPropertyTag</xsl:when>
		<xsl:when test="$type = 'Null'">NullPropertyTag</xsl:when>
		<xsl:when test="$type = 'Int16'">ShortPropertyTag</xsl:when>
		<xsl:when test="$type = 'Int32'">IntPropertyTag</xsl:when>
		<xsl:when test="$type = 'Float'">FloatPropertyTag</xsl:when>
		<xsl:when test="$type = 'Double'">DoublePropertyTag</xsl:when>
		<xsl:when test="$type = 'Currency'">CurrencyPropertyTag</xsl:when>
		<xsl:when test="$type = 'AppTime'">AppTimePropertyTag</xsl:when>
		<xsl:when test="$type = 'Error'">ErrorPropertyTag</xsl:when>
		<xsl:when test="$type = 'Boolean'">BooleanPropertyTag</xsl:when>
		<xsl:when test="$type = 'Object'">ObjectPropertyTag</xsl:when>
		<xsl:when test="$type = 'Int64'">LongPropertyTag</xsl:when>
		<xsl:when test="$type = 'String8'">String8PropertyTag</xsl:when>
		<xsl:when test="$type = 'Unicode'">UnicodePropertyTag</xsl:when>
		<xsl:when test="$type = 'SysTime'">FileTimePropertyTag</xsl:when>
		<xsl:when test="$type = 'ClsId'">GuidPropertyTag</xsl:when>
		<xsl:when test="$type = 'Binary'">BinaryPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvInt16'">ShortArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvInt32'">LongArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvFloat'">FloatArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvDouble'">DoubleArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvCurrency'">CurrencyArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvAppTime'">AppTimeArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvSysTime'">SystimeArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvString8'">String8ArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvBinary'">BinaryArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvUnicode'">UnicodeArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvClsId'">GuidArrayPropertyTag</xsl:when>
		<xsl:when test="$type = 'MvInt64'">BinaryArrayPropertyTag</xsl:when>
	</xsl:choose>
</xsl:template>

<xsl:template match="/properties">
//
// DO NOT EDIT!
// This file was autogenerated.
//

using System;
using System.IO;


using NMapi;
using NMapi.Flags;
using NMapi.Events;
using NMapi.Properties;
using NMapi.Table;

namespace NMapi.Flags {

	/// &lt;summary&gt;
	///  Contains the known property tag constants.
	/// &lt;/summary&gt;
	public static class Property
	{
		/// &lt;summary&gt;
		///  
		/// &lt;/summary&gt;
		public static class Typed
		{			
			<xsl:for-each select="property">
				/// &lt;summary&gt;
				///  A strongly-typed '<xsl:value-of select="@name" />' property tag.
				/// &lt;/summary&gt;
				public static 
					<xsl:call-template name="map-type"><xsl:with-param name="type" select="@type" /></xsl:call-template><xsl:text> </xsl:text>
					<xsl:value-of select="@name" /> = (<xsl:call-template name="map-type"><xsl:with-param name="type" select="@type" /></xsl:call-template>) 
					PropertyTag.CreatePropertyTag (Property.<xsl:value-of select="@name" />);			
			</xsl:for-each>
		}

		<xsl:for-each select="property">
			/// &lt;summary&gt;
			///  Constant 32-bit value representing the <xsl:value-of select="@name" /> property tag.
			/// &lt;/summary&gt;
			[MapiPropDef] public const int <xsl:value-of select="@name" /> =  ((int) PropertyType.<xsl:value-of select="@type" />) | 
			(<xsl:value-of select="@id" /> &lt;&lt; 16);		
		</xsl:for-each>
	}

}
</xsl:template>
</xsl:stylesheet>
