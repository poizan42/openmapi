<?xml version="1.0"?>
<!--
//
// openmapi.org - NMapi C# Mapi API - named.xsl
//
// Copyright 2009 Topalis AG
//
// Author: Johannes Roith <johannes@jroith.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
//-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" omit-xml-declaration="yes" />

<xsl:include href="../common.xsl" />

<xsl:template match="/propertyclasses">
//
// DO NOT EDIT!
// This file was autogenerated.
//

using System;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using System.Net;
using System.Runtime.Serialization;

using NMapi;
using NMapi.Flags;
using NMapi.Events;
using NMapi.Properties;
using NMapi.Table;

namespace NMapi {

	<xsl:apply-templates select="class" />
	
	public partial class NamedPropertyDef
	{

		/// &lt;summary&gt;
		///  TODO: describe!
		/// &lt;/summary&gt;
		/// &lt;param name="namedProp"&gt;TODO: describe here &lt;/param&gt;
		/// &lt;param name="type"&gt;TODO: describe here &lt;/param&gt;
		/// &lt;returns&gt;TODO: describe here &lt;/returns&gt;
		public static NamedPropertyDef Create (MapiNameId namedProp, PropertyType type)
		{
			switch (type) {
				<xsl:for-each select="class">					
					<xsl:choose>
						<xsl:when test="@type = 'DEFAULT'">default: return new <xsl:value-of select="@id" />NamedPropertyDef (namedProp);
						</xsl:when>
						<xsl:otherwise>case PropertyType.<xsl:value-of select="@type" />: return new <xsl:value-of select="@id" />NamedPropertyDef (namedProp);
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			}
		}
	}
	
}

</xsl:template>

<xsl:template match="class">
	<xsl:variable name="nativeType"><xsl:call-template name="get-value-native-type"><xsl:with-param name="type" select="@type" /></xsl:call-template></xsl:variable>
	<xsl:variable name="resolvedType">
		<xsl:choose>
			<xsl:when test="@type = 'DEFAULT'">Unspecified</xsl:when>
			<xsl:otherwise><xsl:value-of select="@type" /></xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	
	/// &lt;summary&gt;
	///  TODO: See base class...
	/// &lt;/summary&gt;
	/// &lt;remarks&gt;
	///  TODO: See base class...
	/// &lt;/remarks&gt;
	public sealed class <xsl:value-of select="@id" />NamedPropertyDef : NamedPropertyDef
	{

		/// &lt;summary&gt;
		///  Creates a new NamedPropertyDef object from a GUID and a string constant.
		/// &lt;/summary&gt;
		/// &lt;param name="guid"&gt;TODO: describe here &lt;/param&gt;
		/// &lt;param name="strName"&gt;TODO: describe here &lt;/param&gt;
		public <xsl:value-of select="@id" />NamedPropertyDef (NMapiGuid guid, string strName)
		 	: this (new StringMapiNameId { Guid = guid, StrName = strName } )
		{
		}

		/// &lt;summary&gt;
		///  Creates a new NamedPropertyDef object from a GUID and an integer constant.
		/// &lt;/summary&gt;
		/// &lt;param name="guid"&gt;TODO: describe here &lt;/param&gt;
		/// &lt;param name="id"&gt;TODO: describe here &lt;/param&gt;
		public <xsl:value-of select="@id" />NamedPropertyDef (NMapiGuid guid, int id)
		 	: this (new NumericMapiNameId { Guid = guid, ID = id } )
		{
		}

		/// &lt;summary&gt;
		///  Creates a new NamedPropertyDef object from a MapiNameId.
		/// &lt;/summary&gt;
		/// &lt;param name="name"&gt;TODO: describe here &lt;/param&gt;
		public <xsl:value-of select="@id" />NamedPropertyDef (MapiNameId name) : base (name)
		{
		}
		
		/// &lt;summary&gt;
		///  Returns the Property Type associated with the named property.
		/// &lt;/summary&gt;
		public override PropertyType Type {
			get { return PropertyType.<xsl:value-of select="$resolvedType" />; }
		}
		
		
		/// &lt;summary&gt;
		///  Creates a <xsl:value-of select="@id" /> from the property tag.
		/// &lt;/summary&gt;
		/// &lt;param name="resolver"&gt;TODO: describe here &lt;/param&gt;
		/// &lt;returns&gt;TODO: describe here &lt;/returns&gt;
		public <xsl:value-of select="@id" />Tag CreateTag (NamedPropertyResolver resolver)
		{
			PropertyTag tag = resolver.Lookup (this);
			return (<xsl:value-of select="@id" />Tag) tag;
		}
		
		/// &lt;summary&gt;
		///  Creates a <xsl:value-of select="@id" /> from the (mapped) tag id.
		/// &lt;/summary&gt;
		/// &lt;param name="tagId"&gt;TODO: describe here &lt;/param&gt;
		/// &lt;returns&gt;TODO: describe here &lt;/returns&gt;
		public <xsl:value-of select="@id" />Tag CreateTag (int tagId)
		{
			PropertyTag tag = PropertyTag.CreatePropertyTag ( 
				((int) PropertyType.<xsl:value-of select="$resolvedType" />) | (tagId &lt;&lt; 16));
			return (<xsl:value-of select="@id" />Tag) tag;
		}
		
	}
	
</xsl:template>
</xsl:stylesheet>
