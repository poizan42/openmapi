<?xml version="1.0"?>
<!--
//
// openmapi.org - NMapi C# Mapi API - tags.xsl
//
// Copyright 2009 Topalis AG
//
// Author: Johannes Roith <johannes@jroith.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
//-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" omit-xml-declaration="yes" />

<xsl:include href="../common.xsl" />

<xsl:template match="/propertyclasses">
//
// DO NOT EDIT!
// This file was autogenerated.
//

using System;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using System.Net;
using System.Runtime.Serialization;

using NMapi.Interop;
using CompactTeaSharp;
using CompactTeaSharp.Server;

using NMapi;
using NMapi.Flags;
using NMapi.Events;
using NMapi.Properties;
using NMapi.Table;
using NMapi.Rules;

namespace NMapi {

	public abstract partial class PropertyTag
	{
		/// &lt;summary&gt;
		///  Creates an instance of a subclass derived from PropertyTag that 
		///  matches the PropertyType of the 32-bit property tag constant.
		/// &lt;/summary&gt;
		public static PropertyTag CreatePropertyTag (int ptag)
		{
			switch (PropertyTypeHelper.PROP_TYPE (ptag)) {
				<xsl:for-each select="class">
					<xsl:choose>
						<xsl:when test="@type = 'DEFAULT'">default: return new <xsl:value-of select="@id" />Tag (ptag);
						</xsl:when>
						<xsl:otherwise>case PropertyType.<xsl:value-of select="@type" />: return new <xsl:value-of select="@id" />Tag (ptag);
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			}
		}
	}

	<xsl:apply-templates select="class" />
}

</xsl:template>

<xsl:template match="class">
	<xsl:variable name="nativeType"><xsl:call-template name="get-value-native-type"><xsl:with-param name="type" select="@type" /></xsl:call-template></xsl:variable>
	
	/// &lt;summary&gt;
	///  TODO: comment!
	/// &lt;/summary&gt;
	public sealed class <xsl:value-of select="@id" />Tag : PropertyTag
	{
	
		/// &lt;summary&gt;
		///  TODO: comment!
		/// &lt;/summary&gt;
		public <xsl:value-of select="@id" />Tag (int tag) : base (tag) // TODO: We need to be careful here to avoid that tags with a different type are passed.
		{
		}
		
		/// &lt;summary&gt;
		///  Creates a <xsl:value-of select="@id" /> from the property tag.
		/// &lt;/summary&gt;
		public <xsl:value-of select="@id" /> CreateValue ()
		{
			return PropertyValue.CreateFromTag (this);
		}
		
		<xsl:if test="$nativeType != ''">
			/// &lt;summary&gt;
			///  Creates a <xsl:value-of select="@id" /> from the property tag and sets the property value.
			/// &lt;/summary&gt;
			public <xsl:value-of select="@id" /> CreateValue (<xsl:value-of select="$nativeType" /><xsl:text> </xsl:text> val)
			{
				<xsl:value-of select="@id" /> pv = PropertyValue.CreateFromTag (this);
				pv.Value = val;
				return pv;
			}
		</xsl:if>
		
	}
	
</xsl:template>
</xsl:stylesheet>
