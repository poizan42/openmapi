<?xml version="1.0"?>
<!--
//
// openmapi.org - NMapi C# Mapi API - Defs.xml
//
// Copyright 2008 Topalis AG
//
// Author: Johannes Roith <johannes@jroith.de>
//
// This is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation; either version 2.1 of
// the License, or (at your option) any later version.
//
// This software is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this software; if not, write to the Free
// Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
// 02110-1301 USA, or see the FSF site: http://www.fsf.org.
//
//-->

<definitions>
	<namespace name="NMapi.Interop">
		<class id="LPSRestriction">
			<declare type="Restriction" privName="_value" constrarg="true">Value</declare>
			<encode>
				<boolGate type="Restriction">_value</boolGate>
			</encode>
			<decode>
				<boolGate static="true" type="Restriction">_value</boolGate>
			</decode>
		</class>

		<class id="LPAdrEntry">
			<declare type="AdrEntry" constrarg="true">Value</declare>
			<both>
				<boolGate type="AdrEntry">Value</boolGate>
			</both>
		</class>

		<class id="LPAdrList">
			<declare type="AdrList" constrarg="true">Value</declare>
			<both>
				<boolGate type="AdrList">Value</boolGate>
			</both>
		</class>

		<class id="LPEntryList">
			<declare type="EntryList" constrarg="true">Value</declare>
			<both>
				<boolGate type="EntryList">Value</boolGate>
			</both>
		</class>

		<class id="LPGuid">
			<declare type="NMapiGuid" constrarg="true">Value</declare>
			<both>
				<boolGate type="NMapiGuid">Value</boolGate>
			</both>
		</class>

		<class id="LPRowEntry">
			<declare type="RowEntry" constrarg="true">Value</declare>
			<both>
				<boolGate type="RowEntry">Value</boolGate>
			</both>
		</class>

		<class id="LPMapiNameId">
			<declare type="MapiNameId" constrarg="true">Value</declare>
			<both>
				<boolGate static="true" type="MapiNameId">Value</boolGate>
			</both>
		</class>

		<class id="LPSPropValue">
			<declare type="PropertyValue" constrarg="true">Value</declare>
			<both>
				<boolGate static="true" type="PropertyValue">Value</boolGate>
			</both>
		</class>

		<class id="LPNotification">
			<declare type="Notification" constrarg="true">Value</declare>
			<both>
				<boolGate static="true" type="Notification">Value</boolGate>
			</both>
		</class>
		
		<class id="LPACTIONS">
			<declare type="NMapi.Rules.Actions" constrarg="true">Value</declare>
			<both>
				<boolGate type="NMapi.Rules.Actions">Value</boolGate>
			</both>
		</class>
	</namespace>

	<namespace name="NMapi">
		<class id="AdrEntry">
			<declare type="int">Reserved1</declare>
			<declare type="PropertyValue" isArray="true" constrarg="true">PropVals</declare>
			<encode>
				<countedSizeArray type="PropertyValue">PropVals</countedSizeArray>
			</encode>
			<decode>
				<countedSizeArray static="true" type="PropertyValue">PropVals</countedSizeArray>
			</decode>
		</class>

		<class id="AdrList">
			<declare type="AdrEntry" isArray="true" privName="aEntries" constrarg="true">AEntries</declare>
			<both>
				<countedSizeArray type="AdrEntry">aEntries</countedSizeArray>
			</both>
		</class>

		<class id="EntryList">
			<declare type="SBinary" isArray="true" constrarg="true">Bin</declare>
			<both>
				<countedSizeArray type="SBinary" constrarg="true">Bin</countedSizeArray>
			</both>
		</class>

		<class id="FileTime">
			<declare type="int" privName="dwHighDateTime">HighDateTime</declare>
			<declare type="int" privName="dwLowDateTime">LowDateTime</declare>
			<both>
				<int>dwHighDateTime</int>
				<int>dwLowDateTime</int>
			</both>
		</class>

		<class id="LargeInteger">
			<declare type="long" constrarg="true">QuadPart</declare>
			<both>
				<wrapped in="LongLong">QuadPart</wrapped><!-- TODO //-->
			</both>
		</class>

		<class id="NMapiGuid">
			<declare type="int">Data1</declare>
			<declare type="short">Data2</declare>
			<declare type="short">Data3</declare>
			<declare type="byte" isArray="true">Data4</declare>
			<both>
				<int>Data1</int>
				<short>Data2</short>
				<short>Data3</short>
				<opaque length="8">Data4</opaque>
			</both>
		</class>

		<class id="LongLong">
			<declare type="long" privName="value" constrarg="true">Value</declare>
			<both>
				<long>value</long>
			</both>
		</class>
	</namespace>
		
	<namespace name="NMapi.Rules">
		
		<class id="Actions">
			<declare type="Action" isArray="true" privName="actions" constrarg="true">Values</declare>
			<declare type="int">_internal</declare>
			<both>
				<int>_internal</int> <!-- txc does want to send this ... //-->
				<countedSizeArray static="true" type="Action">actions</countedSizeArray>
			</both>
		</class>

		<class id="CopyAction" inherits="Action">
			<declare type="byte" isArray="true" privName="lpStoreEntryId">StoreEntryID</declare>
			<declare type="byte" isArray="true" privName="lpFldEntryId">FldEntryId</declare>
			<both>
				<dynamicOpaque>lpStoreEntryId</dynamicOpaque>
				<dynamicOpaque>lpFldEntryId</dynamicOpaque>
			</both>
		</class>

		<class id="MoveAction" inherits="Action">
			<declare type="byte" isArray="true" privName="lpStoreEntryId">StoreEntryID</declare>
			<declare type="byte" isArray="true" privName="lpFldEntryId">FldEntryId</declare>
			<both>
				<dynamicOpaque>lpStoreEntryId</dynamicOpaque>
				<dynamicOpaque>lpFldEntryId</dynamicOpaque>
			</both>
		</class>
	
		<class id="ReplyAction" inherits="Action">
			<declare type="byte" isArray="true" privName="lpEntryId">EntryId</declare>
			<declare type="NMapiGuid" privName="guidReplyTemplate">GuidReplyTemplate</declare>
			<both>
				<dynamicOpaque>lpEntryId</dynamicOpaque>
				<complex type="NMapiGuid">guidReplyTemplate</complex>
			</both>
		</class>

		<class id="OofReplyAction" inherits="Action">
			<declare type="byte" isArray="true" privName="lpEntryId">EntryId</declare>
			<declare type="NMapiGuid" privName="guidReplyTemplate">GuidReplyTemplate</declare>
			<both>
				<dynamicOpaque>lpEntryId</dynamicOpaque>
				<complex type="NMapiGuid">guidReplyTemplate</complex>
			</both>
		</class>

		<class id="DeferAction" inherits="Action">
			<declare type="byte" isArray="true" privName="actionData">ActionData</declare>
			<both>
				<dynamicOpaque>actionData</dynamicOpaque>
			</both>
		</class>
		
		<class id="BounceAction" inherits="Action">
			<declare type="int" privName="scBounceCode">BounceCode</declare>
			<both>
				<int>scBounceCode</int>
			</both>
		</class>
		
		<class id="ForwardAction" inherits="Action">
			<declare type="AdrList" privName="lpadrlist">AdrList</declare>
			<both>
				<wrapped in="LPAdrList">lpadrlist</wrapped>
			</both>
		</class>
		
		<class id="DelegateAction" inherits="Action">
			<declare type="AdrList" privName="lpadrlist">AdrList</declare>
			<both>
				<wrapped in="LPAdrList">lpadrlist</wrapped>
			</both>
		</class>
		
		<class id="TagAction" inherits="Action">
			<declare type="PropertyValue" privName="prop">Prop</declare>
			<both>
				<complex static="true" type="PropertyValue">prop</complex>
			</both>
		</class>
		
		<class id="DeleteAction" inherits="Action">
			<!-- do nothing //-->
		</class>
		
		<class id="MarkAsReadAction" inherits="Action">
			<!-- do nothing //-->
		</class>

	</namespace>
	

	<namespace name="NMapi.Table">

		<class id="AndRestriction" inherits="Restriction">
			<declare type="Restriction" isArray="true" privName="lpRes" constrarg="true">Res</declare>
			<encode>
				<int cast="true">RestrictionType.And</int> <!-- SPECIAL //-->
				<countedSizeArray type="Restriction">lpRes</countedSizeArray>
			</encode>
			<decode>
				<countedSizeArray static="true" type="Restriction">lpRes</countedSizeArray>
			</decode>
		</class>

		<class id="BitMaskRestriction" inherits="Restriction">
			<declare type="int" privName="relBMR">RelBMR</declare>
			<declare type="int" privName="ulPropTag" constrarg="true">PropTag</declare>
			<declare type="int" privName="ulMask" constrarg="true">Mask</declare>
			<encode>
				<int cast="true">RestrictionType.Bitmask</int> <!-- SPECIAL //-->
				<int>relBMR</int>
				<int>ulPropTag</int>
				<int>ulMask</int>
			</encode>
			<decode>
				<int>relBMR</int>
				<int>ulPropTag</int>
				<int>ulMask</int>
			</decode>
		</class>

		<class id="CommentRestriction" inherits="Restriction">
			<declare type="PropertyValue" isArray="true" privName="lpProp">Prop</declare>
			<declare type="Restriction" privName="lpRes">Res</declare>
			<encode>
				<int cast="true">RestrictionType.Comment</int> <!-- SPECIAL //-->
				<countedSizeArray type="PropertyValue">lpProp</countedSizeArray>
				<boolGate type="Restriction">lpRes</boolGate>
			</encode>
			<decode>
				<countedSizeArray static="true" type="PropertyValue">lpProp</countedSizeArray>
				<boolGate static="true" type="Restriction">lpRes</boolGate>
			</decode>
		</class>

		<class id="ComparePropsRestriction" inherits="Restriction">
			<declare type="RelOp" privName="relop">RelOp</declare>
			<declare type="int" privName="ulPropTag1">PropTag1</declare>
			<declare type="int" privName="ulPropTag2">PropTag2</declare>
			<encode>
				<int cast="true">RestrictionType.CompareProps</int> <!-- SPECIAL //-->
				<int cast="true">relop</int>
				<int>ulPropTag1</int>
				<int>ulPropTag2</int>
			</encode>
			<decode>
				<int castTo="RelOp">relop</int>
				<int>ulPropTag1</int>
				<int>ulPropTag2</int>
			</decode>
		</class>

		<class id="ContentRestriction" inherits="Restriction">
			<declare type="FuzzyLevel" privName="ulFuzzyLevel">FuzzyLevel</declare>
			<declare type="int" privName="ulPropTag">PropTag</declare>
			<declare type="PropertyValue" privName="lpProp">Prop</declare>
			<encode>
				<int cast="true">RestrictionType.Content</int> <!-- SPECIAL //-->
				<int cast="true">ulFuzzyLevel</int>
				<int>ulPropTag</int>
				<wrapped in="LPSPropValue">lpProp</wrapped>
			</encode>
			<decode>
				<int castTo="FuzzyLevel">ulFuzzyLevel</int>
				<int>ulPropTag</int>
				<wrapped in="LPSPropValue">lpProp</wrapped>
			</decode>
		</class>

		<class id="ExistRestriction" inherits="Restriction">
			<declare type="int" privName="ulReserved1">Reserved1</declare>
			<declare type="int" privName="ulPropTag">PropTag</declare>
			<declare type="int" privName="ulReserved2">Reserved2</declare>
			<encode>
				<int cast="true">RestrictionType.Exist</int>
				<int>ulReserved1</int>
				<int>ulPropTag</int>
				<int>ulReserved2</int>
			</encode>
			<decode>
				<int>ulReserved1</int>
				<int>ulPropTag</int>
				<int>ulReserved2</int>
				<!-- fix //-->
				<code>
				<![CDATA[
					ulReserved1 = 0;
					ulReserved2 = 0;
				]]>
				</code>
			</decode>
		</class>

		<class id="NotRestriction" inherits="Restriction">
			<declare type="int" privName="ulReserved">Reserved</declare>
			<declare type="Restriction" privName="lpRes" constrarg="true">Res</declare>
			<encode>
				<int cast="true">RestrictionType.Not</int> <!-- SPECIAL //-->
				<int>ulReserved</int>
				<boolGate type="Restriction">lpRes</boolGate>
			</encode>
			<decode>
				<int>ulReserved</int>
				<boolGate static="true" type="Restriction">lpRes</boolGate>
				<code><![CDATA[
				ulReserved = 0;
				]]> <!-- fix ... TODO! //-->
				</code>
			</decode>
		</class>

		<class id="OrRestriction" inherits="Restriction">
			<declare type="Restriction" isArray="true" privName="lpRes" constrarg="true">Res</declare>
			<encode>
				<int cast="true">RestrictionType.Or</int> <!-- SPECIAL //-->
				<countedSizeArray type="Restriction">lpRes</countedSizeArray>
			</encode>
			<decode>
				<code>
				<![CDATA[
					int length = xdr.XdrDecodeInt ();
					lpRes = new Restriction [length];
					for (int i = 0; i < length; i++)
						lpRes [i] = Restriction.Decode (xdr);
				]]>
				</code>
			</decode>
		</class>

		<class id="PropertyRestriction" inherits="Restriction">
			<declare type="RelOp" privName="relOp">RelOp</declare>
			<declare type="int" privName="ulPropTag">PropTag</declare>
			<declare type="PropertyValue" privName="lpProp">Prop</declare>
			<encode>
				<int cast="true">RestrictionType.Property</int> <!-- SPECIAL //-->
				<int cast="true">relOp</int><!-- CAST! //-->
				<int>ulPropTag</int>
				<wrapped in="LPSPropValue">lpProp</wrapped>
			</encode>
			<decode>
				<int castTo="RelOp">relOp</int><!-- CAST! //-->
				<int>ulPropTag</int>
				<wrapped in="LPSPropValue">lpProp</wrapped>
			</decode>
		</class>

		<class id="SizeRestriction" inherits="Restriction">
			<declare type="int" privName="relop">RelOp</declare>
			<declare type="int" privName="ulPropTag">PropTag</declare>
			<declare type="int" privName="cb">Cb</declare>
			<encode>
				<int cast="true">RestrictionType.Size</int> <!-- SPECIAL //-->
				<int>relop</int>
				<int>ulPropTag</int>
				<int>cb</int>
			</encode>
			<decode>
				<int>relop</int>
				<int>ulPropTag</int>
				<int>cb</int>
			</decode>
		</class>

		<class id="SubRestriction" inherits="Restriction">
			<declare type="int" privName="ulSubObject">SubObject</declare>
			<declare type="Restriction" privName="lpRes">Res</declare>
			<encode>
				<int cast="true">RestrictionType.SubRestriction</int> <!-- SPECIAL //-->
				<int>ulSubObject</int>
				<boolGate type="Restriction">lpRes</boolGate>
			</encode>
			<decode>
				<int>ulSubObject</int>
				<boolGate static="true" type="Restriction">lpRes</boolGate>
			</decode>
		</class>

		<!-- TODO: OpenMapi.org-specific; Required for Outlook 2010; Not supported by TXC protocol. (yet?) //-->
		<class id="AnnotationRestriction" inherits="Restriction">
			<declare type="Restriction" privName="lpRes">Res</declare>
			<declare type="PropertyValue" isArray="true" privName="lpProps">Prop</declare>
			<encode>
				<int cast="true">RestrictionType.Annotation</int> <!-- SPECIAL //-->
				<countedSizeArray static="true" type="PropertyValue">lpProps</countedSizeArray>
				<boolGate type="Restriction">lpRes</boolGate>
			</encode>
			<decode>
				<countedSizeArray static="true" type="PropertyValue">lpProps</countedSizeArray>
				<boolGate static="true" type="Restriction">lpRes</boolGate>
			</decode>
		</class>

		<!-- TODO: OpenMapi.org-specific; Required for Outlook 2010; Not supported by TXC protocol. (yet?) //-->
		<class id="CountRestriction" inherits="Restriction">
			<declare type="int" privName="ulCount">Count</declare>
			<declare type="Restriction" privName="lpRes">Res</declare>
			<encode>
				<int cast="true">RestrictionType.Count</int> <!-- SPECIAL //-->
				<int>ulCount</int>
				<boolGate type="Restriction">lpRes</boolGate>
			</encode>
			<decode>
				<int>ulCount</int>
				<boolGate static="true" type="Restriction">lpRes</boolGate>
			</decode>
		</class>

		<class id="SortOrder">
			<declare type="int" privName="ulPropTag">PropTag</declare>
			<declare type="TableSort" privName="ulOrder">Order</declare>
			<both>
				<int>ulPropTag</int>
				<int cast="true" castTo="TableSort">ulOrder</int>
			</both>
		</class>

	</namespace>

	<namespace name="NMapi.Properties">

		<!-- TODO: IPropertyValue implementation should be defined in a different way.
		 			(using props.xml or something) !
		//-->

		<class id="ShortProperty" inherits="PropertyValue, IPropertyValue &lt;short&gt;">
			<declare type="short" privName="i" constrarg="true">Value</declare>
			<both>
				<short>i</short>
			</both>
		</class>

		<class id="IntProperty" inherits="PropertyValue, IPropertyValue &lt;int&gt;">
			<declare type="int" privName="l" constrarg="true">Value</declare>
			<both>
				<int>l</int>
			</both>
		</class>

		<class id="FloatProperty" inherits="PropertyValue, IPropertyValue &lt;float&gt;">
			<declare type="float" privName="flt" constrarg="true">Value</declare>
			<both>
				<float>flt</float>
			</both>
		</class>

		<class id="DoubleProperty" inherits="PropertyValue, IPropertyValue &lt;double&gt;">
			<declare type="double" privName="dbl" constrarg="true">Value</declare>
			<both>
				<double>dbl</double>
			</both>
		</class>

		<class id="CurrencyProperty" inherits="PropertyValue, IPropertyValue &lt;long&gt;">
			<declare type="long" privName="cur" constrarg="true">Value</declare>
			<both>
				<wrapped in="LongLong">cur</wrapped>
			</both>
		</class>

		<class id="AppTimeProperty" inherits="PropertyValue, IPropertyValue &lt;double&gt;">
			<declare type="double" privName="at" constrarg="true">Value</declare>
			<both>
				<double>at</double>
			</both>
		</class>

		<class id="ErrorProperty" inherits="PropertyValue, IPropertyValue &lt;int&gt;">
			<declare type="int" privName="err" constrarg="true">Value</declare>
			<both>
				<int>err</int>
			</both>
		</class>

		<class id="BooleanProperty" inherits="PropertyValue, IPropertyValue &lt;short&gt;">
			<declare type="short" privName="b" constrarg="true">Value</declare>
			<both>
				<short>b</short>
			</both>
		</class>

		<class id="ObjectProperty" inherits="PropertyValue, IPropertyValue &lt;int&gt;">
			<declare type="int" privName="x" constrarg="true">Value</declare>
			<both>
				<int>x</int>
			</both>
		</class>

		<class id="LongProperty" inherits="PropertyValue, IPropertyValue &lt;long&gt;">
			<declare type="long" privName="li" constrarg="true">Value</declare>
			<both>
				<wrapped in="LongLong">li</wrapped>
			</both>
		</class>

		<class id="String8Property" inherits="PropertyValue, IPropertyValue &lt;string&gt;">
			<declare type="string" privName="lpszA" constrarg="true">Value</declare>
			<both>
				<wrapped in="StringAdapter">lpszA</wrapped>
			</both>
		</class>

		<class id="UnicodeProperty" inherits="PropertyValue, IPropertyValue &lt;string&gt;">
			<declare type="string" privName="lpszW" constrarg="true">Value</declare>
			<both>
				<wrapped in="UnicodeAdapter">lpszW</wrapped>
			</both>
		</class>

		<class id="FileTimeProperty" inherits="PropertyValue, IPropertyValue &lt;FileTime&gt;">
			<declare type="FileTime" privName="ft" constrarg="true">Value</declare>
			<both>
				<complex type="FileTime">ft</complex>
			</both>
		</class>

		<class id="GuidProperty" inherits="PropertyValue, IPropertyValue &lt;NMapiGuid&gt;">
			<declare type="NMapiGuid" privName="lpguid" constrarg="true">Value</declare>
			<both>
				<wrapped in="LPGuid">lpguid</wrapped>
			</both>
		</class>

		<class id="BinaryProperty" inherits="PropertyValue, IPropertyValue &lt;SBinary&gt;">
			<declare type="SBinary" privName="bin" constrarg="true">Value</declare>
			<both>
				<complex type="SBinary">bin</complex>
			</both>
		</class>
		
		<class id="ActionsProperty" inherits="PropertyValue, IPropertyValue &lt;NMapi.Rules.Actions&gt;">
			<declare type="NMapi.Rules.Actions" privName="actions" constrarg="true">Value</declare>
			<both>
				<wrapped in="LPACTIONS">actions</wrapped>
			</both>
		</class>
		
		<class id="RestrictionProperty" inherits="PropertyValue, IPropertyValue &lt;Restriction&gt;">
			<declare type="Restriction" privName="restriction" constrarg="true">Value</declare>
			<both>
				<wrapped in="LPSRestriction">restriction</wrapped>
			</both>
		</class>
		
		<class id="ShortArrayProperty" inherits="PropertyValue, IPropertyValue &lt;short []&gt;">
			<declare type="short" isArray="true" privName="MVi" constrarg="true">Value</declare>
			<both>
				<shortVector>MVi</shortVector>
			</both>
		</class>

		<class id="IntArrayProperty" inherits="PropertyValue, IPropertyValue &lt;int []&gt;">
			<declare type="int" isArray="true" privName="MVl" constrarg="true">Value</declare>
			<both>
				<intVector>MVl</intVector>
			</both>
		</class>

		<class id="FloatArrayProperty" inherits="PropertyValue, IPropertyValue &lt;float []&gt;">
			<declare type="float" isArray="true" privName="MVflt" constrarg="true">Value</declare>
			<both>
				<floatVector>MVflt</floatVector>
			</both>
		</class>

		<class id="DoubleArrayProperty" inherits="PropertyValue, IPropertyValue &lt;double []&gt;">
			<declare type="double" isArray="true" privName="MVdbl" constrarg="true">Value</declare>
			<both>
				<doubleVector>MVdbl</doubleVector>
			</both>
		</class>

		<class id="CurrencyArrayProperty" inherits="PropertyValue, IPropertyValue &lt;long []&gt;">
			<declare type="long" isArray="true" privName="MVcur" constrarg="true">Value</declare>
			<both>
				<wrappedCountedSizeArray type="long" in="LongLong">MVcur</wrappedCountedSizeArray>
			</both>
		</class>

		<class id="AppTimeArrayProperty" inherits="PropertyValue, IPropertyValue &lt;double []&gt;">
			<declare type="double" isArray="true" privName="MVat" constrarg="true">Value</declare>
			<both>
				<doubleVector>MVat</doubleVector>
			</both>
		</class>

		<class id="FileTimeArrayProperty" inherits="PropertyValue, IPropertyValue &lt;FileTime []&gt;">
			<declare type="FileTime" isArray="true" privName="MVft" constrarg="true">Value</declare>
			<both>
				<countedSizeArray type="FileTime">MVft</countedSizeArray>
			</both>
		</class>

		<class id="BinaryArrayProperty" inherits="PropertyValue, IPropertyValue &lt;SBinary []&gt;">
			<declare type="SBinary" isArray="true" privName="MVbin" constrarg="true">Value</declare>
			<both>
				<countedSizeArray type="SBinary">MVbin</countedSizeArray>
			</both>
		</class>

		<class id="String8ArrayProperty" inherits="PropertyValue, IPropertyValue &lt;string []&gt;">
			<declare type="string" isArray="true" privName="MVsza" constrarg="true">Value</declare>
			<both>
				<wrappedCountedSizeArray type="string" in="StringAdapter">MVsza</wrappedCountedSizeArray>
			</both>
		</class>

		<class id="UnicodeArrayProperty" inherits="PropertyValue, IPropertyValue &lt;string []&gt;">
			<declare type="string" isArray="true" privName="MVszW" constrarg="true">Value</declare>
			<both>
				<wrappedCountedSizeArray type="string" in="UnicodeAdapter">MVszW</wrappedCountedSizeArray>
			</both>
		</class>

		<class id="GuidArrayProperty" inherits="PropertyValue, IPropertyValue &lt;NMapiGuid []&gt;">
			<declare type="NMapiGuid" isArray="true" privName="MVguid" constrarg="true">Value</declare>
			<both>
				<countedSizeArray type="NMapiGuid">MVguid</countedSizeArray>
			</both>
		</class>

		<class id="LongArrayProperty" inherits="PropertyValue, IPropertyValue &lt;long []&gt;">
			<declare type="long" isArray="true" privName="MVli" constrarg="true">Value</declare>
			<both>
				<wrappedCountedSizeArray type="long" in="LongLong">MVli</wrappedCountedSizeArray>
			</both>
		</class>

		<class id="XProperty" inherits="PropertyValue, IPropertyValue &lt;int&gt;">
			<declare type="int" privName="x" constrarg="true">Value</declare>
			<both>
				<int>x</int>
			</both>
		</class>

		<class id="NullProperty" inherits="PropertyValue">
			<declare type="int" privName="ignored" constrarg="false">__ignored</declare>
			<both>
				<int>ignored</int>
			</both>
		</class>

		<class id="NumericMapiNameId" inherits="MapiNameId">
			<declare type="int" privName="lID" constrarg="true">ID</declare>
			<both>
				<int>lID</int>
			</both>
		</class>

		<class id="StringMapiNameId" inherits="MapiNameId">
			<declare type="string" privName="lpwstrName" constrarg="true">StrName</declare>
			<both>
				<wrapped in="UnicodeAdapter">lpwstrName</wrapped>
			</both>
		</class>

		<class id="PropertyProblem">
			<declare type="int" privName="ulIndex">Index</declare>
			<declare type="int" privName="ulPropTag">PropTag</declare>
			<declare type="int" privName="scode">SCode</declare>
			<both>
				<int>ulIndex</int>
				<int>ulPropTag</int>
				<int>scode</int>
			</both>
		</class>
	</namespace>


	<namespace name="NMapi.Events">

		<class id="ErrorNotification" inherits="Notification">
			<declare type="byte" isArray="true" privName="lpEntryID">EntryID</declare>
			<declare type="int" privName="scode">SCode</declare>
			<declare type="int" privName="ulFlags">Flags</declare>
			<declare type="MapiError" privName="lpMAPIError">MAPIError</declare>
			<encode>
				<dynamicOpaque>lpEntryID</dynamicOpaque>
				<int>scode</int>
				<int>ulFlags</int>
				<code>
					<![CDATA[
					if ((ulFlags & 0x80000000) != 0)
						new MapiErrorUnicodeAdapter (lpMAPIError).XdrEncode(xdr);
					else
						new MapiErrorStringAdapter (lpMAPIError).XdrEncode(xdr);
					]]>
				</code>
			</encode>
			<decode>
				<dynamicOpaque>lpEntryID</dynamicOpaque>
				<int>scode</int>
				<int>ulFlags</int>
				<code>
					<![CDATA[
					if ((ulFlags & 0x80000000) != 0)
						lpMAPIError = new MapiErrorUnicodeAdapter (xdr).Value;
					else
						lpMAPIError = new MapiErrorStringAdapter (xdr).Value;
						]]>
				</code>
			</decode>
		</class>

		<class id="ExtendedNotification" inherits="Notification">
			<declare type="int" privName="ulEvent">Event</declare>
			<declare type="byte" isArray="true" privName="pbEventParameters">EventParameters</declare>
			<both>
				<int>ulEvent</int>
				<dynamicOpaque>pbEventParameters</dynamicOpaque>
			</both>
		</class>

		<class id="NewMailNotification" inherits="Notification">
			<declare type="byte" isArray="true" privName="lpEntryID">EntryID</declare>
			<declare type="byte" isArray="true" privName="lpParentID">ParentID</declare>
			<declare type="int" privName="ulFlags">Flags</declare>
			<declare type="string" privName="lpszMessageClass">MessageClass</declare>
			<declare type="int" privName="ulMessageFlags">MessageFlags</declare>
			<encode>
				<dynamicOpaque>lpEntryID</dynamicOpaque>
				<dynamicOpaque>lpParentID</dynamicOpaque>
				<int>ulFlags</int>
				<code>
					<![CDATA[
					if ((ulFlags & 0x80000000) != 0)
						new UnicodeAdapter (lpszMessageClass).XdrEncode (xdr);
					else
						new StringAdapter (lpszMessageClass).XdrEncode (xdr);
					]]>
				</code>
				<int>ulMessageFlags</int>
			</encode>
			<decode>
				<dynamicOpaque>lpEntryID</dynamicOpaque>
				<dynamicOpaque>lpParentID</dynamicOpaque>
				<int>ulFlags</int>
				<code>
					<![CDATA[
					if ((ulFlags & 0x80000000) != 0)
						lpszMessageClass = new UnicodeAdapter (xdr).value;
					else
						lpszMessageClass = new StringAdapter (xdr).value;
					]]>
				</code>
				<int>ulMessageFlags</int>
			</decode>
		</class>

		<class id="ObjectNotification" inherits="Notification">
			<declare type="byte" isArray="true" privName="lpEntryID">EntryID</declare>
			<declare type="int" privName="ulObjType">ObjType</declare>
			<declare type="byte" isArray="true" privName="lpParentID">ParentID</declare>
			<declare type="byte" isArray="true" privName="lpOldID">OldID</declare>
			<declare type="byte" isArray="true" privName="lpOldParentID">OldParentID</declare>
			<declare type="PropertyTag[]" privName="lpPropTagArray">PropTagArray</declare>
			<both>
				<dynamicOpaque>lpEntryID</dynamicOpaque>
				<int>ulObjType</int>
				<dynamicOpaque>lpParentID</dynamicOpaque>
				<dynamicOpaque>lpOldID</dynamicOpaque>
				<dynamicOpaque>lpOldParentID</dynamicOpaque>
				<wrapped in="PropertyTagArrayPtrAdapter">lpPropTagArray</wrapped>
			</both>
		</class>

		<class id="StatusObjectNotification" inherits="Notification">
			<declare type="byte" isArray="true" privName="lpEntryID">EntryID</declare>
			<declare type="PropertyValue" isArray="true" privName="lpPropVals">PropVals</declare>
			<both>
				<dynamicOpaque>lpEntryID</dynamicOpaque>
				<countedSizeArray static="true" type="PropertyValue">lpPropVals</countedSizeArray>
			</both>
		</class>

		<class id="TableNotification" inherits="Notification">
			<declare type="TableNotificationType" privName="ulTableEvent">TableEvent</declare>
			<declare type="int" privName="hResult">HResult</declare>
			<declare type="PropertyValue" privName="propIndex">PropIndex</declare>
			<declare type="PropertyValue" privName="propPrior">PropPrior</declare>
			<declare type="Row" privName="row">Row</declare>
			<both>
				<int cast="true" castTo="TableNotificationType">ulTableEvent</int>
				<int>hResult</int>
				<complex static="true" type="PropertyValue">propIndex</complex>
				<complex static="true" type="PropertyValue">propPrior</complex>
				<complex type="Row">row</complex>
			</both>
		</class>

	</namespace>
</definitions>

<!-- vi:set noexpandtab: -->
