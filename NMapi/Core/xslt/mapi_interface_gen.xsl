<?xml version="1.0"?>
<!--
//
// openmapi.org - OpenMapi Proxy Server - mapi_interface_gen.xsl
//
// Copyright 2009 Topalis AG
//
// Author: Johannes Roith <johannes@jroith.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
//-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" omit-xml-declaration="yes" />

<xsl:template match="/interfaces">
//
// DO NOT EDIT!
// This file was autogenerated.
//

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;

using System.Reflection;

using NMapi;
using NMapi.Events;
using NMapi.Flags;
using NMapi.Properties;
using NMapi.Properties.Special;
using NMapi.Table;

	<xsl:apply-templates select="interface" />
</xsl:template>

<xsl:template name="foldLines">
	<xsl:param name="string"/>
	<xsl:choose>
		<xsl:when test="contains($string,'&#10;')">
			<xsl:value-of select="substring-before($string,'&#10;')" />
			<xsl:call-template name="foldLines">
				<xsl:with-param name="string"
					select="substring-after($string,'&#10;')"/>
				</xsl:call-template>
		</xsl:when>
		<xsl:otherwise><xsl:value-of select="$string"/></xsl:otherwise>
	</xsl:choose>
</xsl:template>


<xsl:template match="interface">
	
	<xsl:variable name="namespace">
		<xsl:choose>
			<xsl:when test="@id = 'IMapiProp'">NMapi.Properties</xsl:when>
			<xsl:when test="@id = 'IMapiContainer' or @id = 'IMapiFolder' or @id = 'IMessage' or @id = 'IMsgStore'">
				NMapi.Properties.Special
			</xsl:when>
			<xsl:when test="@id = 'IMapiTable'">NMapi.Table</xsl:when>
			<xsl:otherwise>NMapi</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>

	namespace <xsl:value-of select="normalize-space ($namespace)" /> {


		//// &lt;summary&gt;
		///  <xsl:call-template name="foldLines">
				<xsl:with-param name="string" select="node()/doc/summary/text()" />
			</xsl:call-template>
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		///  <xsl:call-template name="foldLines">
				<xsl:with-param name="string" select="node()/doc/remarks/text()" />
			</xsl:call-template>
		/// &lt;/remarks&gt;
		public partial interface <xsl:value-of select="@id" /> 
			: <xsl:value-of select="@implements" />
		{
			<xsl:apply-templates select="method|property" />
		}	
	}
	
</xsl:template>

<xsl:template match="method|property">
	<xsl:variable name="returnValue">
		<xsl:choose>
			<xsl:when test="returns">
				<xsl:value-of select="returns/text()" />
			</xsl:when>
			<xsl:otherwise>void</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>

		/// &lt;summary&gt;
		///  <xsl:call-template name="foldLines">
				<xsl:with-param name="string" select="node()/doc/remarks/text()" />
			</xsl:call-template>
		/// &lt;/summary&gt;
		/// &lt;remarks&gt;
		///  <xsl:call-template name="foldLines">
				<xsl:with-param name="string" select="node()/doc/remarks/text()" />
			</xsl:call-template>
		/// &lt;/remarks&gt;
		/// &lt;exception cref="MapiException"&gt;Throws MapiException&lt;/exception&gt;
	<xsl:for-each select="node()/doc/exception">
		/// &lt;exception cref="<xsl:value-of select="@cref" />"&gt;<xsl:value-of select="text()" />&lt;/exception&gt;
	</xsl:for-each>
	<xsl:choose>
	<xsl:when test="name() = 'method'">
		<xsl:value-of select="normalize-space($returnValue)" /><xsl:text> </xsl:text><xsl:value-of select="@id" />
			(<xsl:for-each select="param"><xsl:value-of select="@type" /><xsl:text> </xsl:text><xsl:value-of select="text()" />
			<xsl:if test="following-sibling::param">, </xsl:if></xsl:for-each>);
	</xsl:when>
	<xsl:when test="name() = 'property'">
		<xsl:value-of select="normalize-space($returnValue)" /><xsl:text> </xsl:text>
		<xsl:value-of select="@id" /><xsl:text> </xsl:text> {
			<xsl:if test="get">get;</xsl:if> <xsl:if test="set">set;</xsl:if>
		}
	</xsl:when>
	</xsl:choose>
</xsl:template>

</xsl:stylesheet>