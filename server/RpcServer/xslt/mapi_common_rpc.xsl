<?xml version="1.0"?>
<!--
//
// openmapi.org - OpenMapi Proxy Server - mapi_common_rpc.xsl
//
// Copyright 2008 Topalis AG
//
// Author: Johannes Roith <johannes@jroith.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
//-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:output method="text" omit-xml-declaration="yes" />

<xsl:template match="/interfaces">
//
// DO NOT EDIT!
// This file was autogenerated.
//

using System;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;

using System.Reflection;

using NMapi;
using NMapi.Events;
using NMapi.Flags;
using NMapi.Properties;
using NMapi.Properties.Special;
using NMapi.Table;

namespace NMapi.Server {
		public partial class CommonRpcService {
			<xsl:apply-templates select="interface/method|interface/property" />
		}
		
	}
</xsl:template>

<xsl:template match="method|property">

	<xsl:variable name="rpcMethodName"><xsl:value-of select="parent::node()/@id" />_<xsl:choose>
		<xsl:when test="@rpcId != ''"><xsl:value-of select="@rpcId" /></xsl:when>
		<xsl:otherwise><xsl:value-of select="@id" /></xsl:otherwise>
		</xsl:choose></xsl:variable>

	<xsl:variable name="returnValue">
		<xsl:choose>
			<xsl:when test="returns[@map='true']">CommonRpcObjRef</xsl:when>
			<xsl:when test="returns"><xsl:value-of select="returns/text()" /></xsl:when>
			<xsl:otherwise>void</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	
	[MapiModableCall (RemoteCall.<xsl:value-of select="$rpcMethodName" />)]
	public virtual <xsl:value-of select="$returnValue" /><xsl:text> </xsl:text>
		<xsl:value-of select="$rpcMethodName" /> (Request request, 
		<xsl:value-of select="parent::node()/@id" /> obj
		<xsl:if test="param">, </xsl:if>
		<xsl:for-each select="param">
			<xsl:value-of select="@type" /><xsl:text> </xsl:text>
			<xsl:value-of select="text()" />
			<xsl:if test="following-sibling::param">, </xsl:if>
		</xsl:for-each>)
	{
		DebugStartCall (); try {
		<xsl:choose>
			<xsl:when test="proxyCode">
				<xsl:for-each select="proxyCode">
					<xsl:value-of select="." />
				</xsl:for-each>
				 DebugEndCall (); return result;
			</xsl:when>
			<xsl:when test="proxyCodeVoid">
				<xsl:for-each select="proxyCodeVoid">
					<xsl:value-of select="." />
			</xsl:for-each>
			</xsl:when>
			<xsl:when test="$returnValue = 'CommonRpcObjRef'">
				var mapObj = obj.<xsl:value-of select="@id" />
				<xsl:if test="name() != 'property'" >(
					<xsl:for-each select="param">
						<xsl:value-of select="text()" />
						<xsl:if test="following-sibling::param">, </xsl:if>
					</xsl:for-each>)
				</xsl:if>;
				var result = request.ProxySession.ObjectStore.MapObject (mapObj);
				DebugEndCall ();
				return result;
			</xsl:when>
			<xsl:when test="$returnValue = 'void'">
				obj.<xsl:value-of select="@id" /> (
				<xsl:for-each select="param">
					<xsl:value-of select="text()" />
					<xsl:if test="following-sibling::param">, </xsl:if>
				</xsl:for-each>); DebugEndCall ();<!-- OAOO //-->
			</xsl:when>
			<xsl:otherwise>
				var result = obj.<xsl:value-of select="@id" />
				<xsl:if test="name() != 'property'" >(
					<xsl:for-each select="param">
						<xsl:value-of select="text()" />
						<xsl:if test="following-sibling::param">, </xsl:if>
					</xsl:for-each>)
				</xsl:if>;
			DebugEndCall ();return result;<!-- OAOO //-->
			</xsl:otherwise>
		</xsl:choose>
		 } catch (Exception e) { DebugCleanUp (e); throw; }
	}
</xsl:template>

</xsl:stylesheet>