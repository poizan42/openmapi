// openmapi.org - NMapi C# IMAP Gateway - CmdCreate.cs
//
// Copyright 2008 Topalis AG
//
// Author: Andreas Huegel <andreas.huegel@topalis.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Affero General Public License for more details.
//

using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;

using NMapi;
using NMapi.Flags;
using NMapi.Table;
using NMapi.Linq;
using NMapi.Properties;
using NMapi.Properties.Special;
using NMapi.Format.Mime;
using NMapi.Gateways.IMAP;
using NMapi.DirectoryModel;

namespace NMapi.Gateways.IMAP {

	public sealed class CmdCreate : AbstractBaseCommandProcessor
	{
		public override string Name {
			get {
				return "CREATE";
			}
		}

		public CmdCreate (IMAPConnectionState state) : base (state)
		{
		}

		public override void Run (Command command)
		{
			try {

				string path = PathHelper.ResolveAbsolutePath (PathHelper.PathSeparator + ConversionHelper.MailboxIMAPToUnicode (command.Mailbox1));
				string[] pathEls = PathHelper.Path2Array (path);

				string pathNew = "";
				IMapiFolder folder = ServCon.FolderHelper.OpenFolder (string.Empty + PathHelper.PathSeparator);
				for (int i = 0; i < pathEls.Length; i++) {
					pathNew = pathNew + PathHelper.PathSeparator + pathEls[i];
					IMapiFolder folderNew = ServCon.FolderHelper.OpenFolder (pathNew);
					if (folderNew == null) {
						state.Log ("CmdCreate folderName: " + pathEls[i]);
						folderNew = folder.CreateFolder (Folder.Generic, pathEls[i], "generated by openmapi IMAP-Gateway", null, Mapi.Unicode);
					} else if (i == pathEls.Length - 1) {
						state.ResponseManager.AddResponse (new Response (ResponseState.NO, Name,command.Tag).AddResponseItem ("Folder already exists"));
						return;
					}
					folder = folderNew;
				}				
				state.ResponseManager.AddResponse (new Response (ResponseState.OK, Name, command.Tag).AddResponseItem ("Folder created", ResponseItemMode.ForceAtom));
			}
			catch (Exception e) {
				state.ResponseManager.AddResponse (new Response (ResponseState.NO, Name, command.Tag).AddResponseItem (e.Message, ResponseItemMode.ForceAtom));
				state.Log (e.StackTrace);
			}
		}

	}
}
